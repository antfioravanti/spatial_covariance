# We use a names pattern to split the column names into Estimator and Statistic.
df_long <- df_summarized %>%
pivot_longer(
cols = c(Naive_mean, Naive_lower, Naive_upper,
Tapered_mean, Tapered_lower, Tapered_upper,
SeparableTapered_mean, SeparableTapered_lower, SeparableTapered_upper),
names_to = c("Estimator", ".value"),
names_pattern = "(.*)_(.*)"
)
# Now df_long has columns: GridSize, beta, Estimator, mean, lower, upper.
# Define colors for the estimators
estimator_colors <- c("Naive" = "black", "Tapered" = "blue", "SeparableTapered" = "red")
# Set up a 1-row by 2-column layout for the two β values.
par(mfrow = c(1, 2), oma = c(4, 0, 2, 0), mar = c(5, 5, 4, 2))
# Define translucent fill colors for CIs
ci_fill <- c("Naive" = adjustcolor("black", alpha.f = 0.15),
"Tapered" = adjustcolor("blue", alpha.f = 0.15),
"SeparableTapered" = adjustcolor("red", alpha.f = 0.15))
# Get unique beta values (expected: 0 and 1)
beta_values <- sort(unique(df_long$beta))
# Loop over each beta value to create a panel
for (b in beta_values) {
df_sub <- subset(df_long, beta == b)
# Set x and y axis limits
x_range <- range(df_sub$GridSize, na.rm = TRUE)
y_range <- range(df_sub$lower, df_sub$upper, na.rm = TRUE)
# Empty plot
plot(x_range, y_range, type = "n",
main = paste("β =", b),
xlab = "GridSize", ylab = "Mean Spectral Norm Diff",
xaxt = "n")
axis(1, at = unique(df_sub$GridSize))
for (est in names(estimator_colors)) {
df_est <- subset(df_sub, Estimator == est)
if (nrow(df_est) > 0) {
ord <- order(df_est$GridSize)
x_vals <- df_est$GridSize[ord]
y_mean <- df_est$mean[ord]
y_lower <- df_est$lower[ord]
y_upper <- df_est$upper[ord]
# Draw shaded CI ribbon using polygon
polygon(c(x_vals, rev(x_vals)),
c(y_lower, rev(y_upper)),
col = ci_fill[est], border = NA)
# Draw mean line
lines(x_vals, y_mean, col = estimator_colors[est], lwd = 2)
points(x_vals, y_mean, col = estimator_colors[est], pch = 16)
# (Optional annotation removed)
}
}
}
# Add legend manually at specific coordinates
par(xpd = NA)
# Use a smaller top boundary for the legend region (e.g., 0.1 becomes 0.08)
par(fig = c(0, 1, 0, 0.08), new = TRUE, mar = c(0, 0, 0, 0))
plot.new()
usr <- par("usr")
# Lower the legend by subtracting a small offset (e.g., 0.05 times the vertical extent)
legend(x = (usr[1] + usr[2]) / 2,
y = usr[3] + 0.5 * (usr[4] - usr[3]) - 0.05 * (usr[4] - usr[3]),
legend = names(estimator_colors),
col = estimator_colors, lwd = 2, pch = 16, horiz = TRUE,
bty = "n", cex = 1.2, xjust = 0.5)
par(xpd = FALSE)
# Read data
resdir <- file.path(wd, "results")
df <- read.csv(file.path(resdir, "res_grid_search_all_01-04-2025.csv"), sep = ";")
# Set filtering parameters:
alpha_filter   <- 1
type_filter    <- "rectangular"
lambda_sep     <- 4    # for beta = 0 (separable)
lambda_nonsep  <- 8   # for beta = 1 (nonseparable)
# Choose one bandwidth value for each case:
l_filter_beta0 <- 9   # chosen bandwidth for separable case (β = 0)
l_filter_beta1 <- 5   # chosen bandwidth for nonseparable case (β = 1)
# Filter data: we select rows corresponding to the chosen l values
df_filtered <- df %>%
filter(
alpha    == alpha_filter,
type     == type_filter,
GridSize != 10,
(
(beta == 0 & lambda == lambda_sep & l == l_filter_beta0) |
(beta == 1 & lambda == lambda_nonsep & l == l_filter_beta1)
)
)
# Summarize: group by GridSize and beta, then compute means and SDs
df_summarized <- df_filtered %>%
group_by(GridSize, beta) %>%
summarise(
Naive_mean = mean(SNorm, na.rm = TRUE),
Naive_sd   = sd(SNorm, na.rm = TRUE),
Tapered_mean = mean(SNormTapered, na.rm = TRUE),
Tapered_sd   = sd(SNormTapered, na.rm = TRUE),
SeparableTapered_mean = mean(SNormSeparTapered, na.rm = TRUE),
SeparableTapered_sd   = sd(SNormSeparTapered, na.rm = TRUE),
n = n(),
.groups = "drop"
) %>%
# Compute standard errors and 95% confidence intervals using t quantiles:
mutate(
Naive_se = Naive_sd / sqrt(n),
Tapered_se = Tapered_sd / sqrt(n),
SeparableTapered_se = SeparableTapered_sd / sqrt(n),
Naive_lower = Naive_mean - qt(0.975, df = n - 1) * Naive_se,
Naive_upper = Naive_mean + qt(0.975, df = n - 1) * Naive_se,
Tapered_lower = Tapered_mean - qt(0.975, df = n - 1) * Tapered_se,
Tapered_upper = Tapered_mean + qt(0.975, df = n - 1) * Tapered_se,
SeparableTapered_lower = SeparableTapered_mean - qt(0.975, df = n - 1) * SeparableTapered_se,
SeparableTapered_upper = SeparableTapered_mean + qt(0.975, df = n - 1) * SeparableTapered_se
)
# Reshape the data: pivot_longer so that we have one row per GridSize, beta, and Estimator.
# We use a names pattern to split the column names into Estimator and Statistic.
df_long <- df_summarized %>%
pivot_longer(
cols = c(Naive_mean, Naive_lower, Naive_upper,
Tapered_mean, Tapered_lower, Tapered_upper,
SeparableTapered_mean, SeparableTapered_lower, SeparableTapered_upper),
names_to = c("Estimator", ".value"),
names_pattern = "(.*)_(.*)"
)
# Now df_long has columns: GridSize, beta, Estimator, mean, lower, upper.
# Define colors for the estimators
estimator_colors <- c("Naive" = "black", "Tapered" = "blue", "SeparableTapered" = "red")
# Set up a 1-row by 2-column layout for the two β values.
par(mfrow = c(1, 2), oma = c(4, 0, 2, 0), mar = c(5, 5, 4, 2))
# Define translucent fill colors for CIs
ci_fill <- c("Naive" = adjustcolor("black", alpha.f = 0.15),
"Tapered" = adjustcolor("blue", alpha.f = 0.15),
"SeparableTapered" = adjustcolor("red", alpha.f = 0.15))
# Get unique beta values (expected: 0 and 1)
beta_values <- sort(unique(df_long$beta))
# Loop over each beta value to create a panel
for (b in beta_values) {
df_sub <- subset(df_long, beta == b)
# Set x and y axis limits
x_range <- range(df_sub$GridSize, na.rm = TRUE)
y_range <- range(df_sub$lower, df_sub$upper, na.rm = TRUE)
# Empty plot
plot(x_range, y_range, type = "n",
main = paste("β =", b),
xlab = "GridSize", ylab = "Mean Spectral Norm Diff",
xaxt = "n")
axis(1, at = unique(df_sub$GridSize))
for (est in names(estimator_colors)) {
df_est <- subset(df_sub, Estimator == est)
if (nrow(df_est) > 0) {
ord <- order(df_est$GridSize)
x_vals <- df_est$GridSize[ord]
y_mean <- df_est$mean[ord]
y_lower <- df_est$lower[ord]
y_upper <- df_est$upper[ord]
# Draw shaded CI ribbon using polygon
polygon(c(x_vals, rev(x_vals)),
c(y_lower, rev(y_upper)),
col = ci_fill[est], border = NA)
# Draw mean line
lines(x_vals, y_mean, col = estimator_colors[est], lwd = 2)
points(x_vals, y_mean, col = estimator_colors[est], pch = 16)
# (Optional annotation removed)
}
}
}
# Add legend manually at specific coordinates
par(xpd = NA)
# Use a smaller top boundary for the legend region (e.g., 0.1 becomes 0.08)
par(fig = c(0, 1, 0, 0.08), new = TRUE, mar = c(0, 0, 0, 0))
plot.new()
usr <- par("usr")
# Lower the legend by subtracting a small offset (e.g., 0.05 times the vertical extent)
legend(x = (usr[1] + usr[2]) / 2,
y = usr[3] + 0.5 * (usr[4] - usr[3]) - 0.05 * (usr[4] - usr[3]),
legend = names(estimator_colors),
col = estimator_colors, lwd = 2, pch = 16, horiz = TRUE,
bty = "n", cex = 1.2, xjust = 0.5)
par(xpd = FALSE)
# Read data
resdir <- file.path(wd, "results")
df <- read.csv(file.path(resdir, "res_grid_search_all_01-04-2025.csv"), sep = ";")
# Set filtering parameters:
alpha_filter   <- 1
type_filter    <- "trapezoid"
lambda_sep     <- 4    # for beta = 0 (separable)
lambda_nonsep  <- 8   # for beta = 1 (nonseparable)
# Choose one bandwidth value for each case:
l_filter_beta0 <- 9   # chosen bandwidth for separable case (β = 0)
l_filter_beta1 <- 5   # chosen bandwidth for nonseparable case (β = 1)
# Filter data: we select rows corresponding to the chosen l values
df_filtered <- df %>%
filter(
alpha    == alpha_filter,
type     == type_filter,
GridSize != 10,
(
(beta == 0 & lambda == lambda_sep & l == l_filter_beta0) |
(beta == 1 & lambda == lambda_nonsep & l == l_filter_beta1)
)
)
# Summarize: group by GridSize and beta, then compute means and SDs
df_summarized <- df_filtered %>%
group_by(GridSize, beta) %>%
summarise(
Naive_mean = mean(SNorm, na.rm = TRUE),
Naive_sd   = sd(SNorm, na.rm = TRUE),
Tapered_mean = mean(SNormTapered, na.rm = TRUE),
Tapered_sd   = sd(SNormTapered, na.rm = TRUE),
SeparableTapered_mean = mean(SNormSeparTapered, na.rm = TRUE),
SeparableTapered_sd   = sd(SNormSeparTapered, na.rm = TRUE),
n = n(),
.groups = "drop"
) %>%
# Compute standard errors and 95% confidence intervals using t quantiles:
mutate(
Naive_se = Naive_sd / sqrt(n),
Tapered_se = Tapered_sd / sqrt(n),
SeparableTapered_se = SeparableTapered_sd / sqrt(n),
Naive_lower = Naive_mean - qt(0.975, df = n - 1) * Naive_se,
Naive_upper = Naive_mean + qt(0.975, df = n - 1) * Naive_se,
Tapered_lower = Tapered_mean - qt(0.975, df = n - 1) * Tapered_se,
Tapered_upper = Tapered_mean + qt(0.975, df = n - 1) * Tapered_se,
SeparableTapered_lower = SeparableTapered_mean - qt(0.975, df = n - 1) * SeparableTapered_se,
SeparableTapered_upper = SeparableTapered_mean + qt(0.975, df = n - 1) * SeparableTapered_se
)
# Reshape the data: pivot_longer so that we have one row per GridSize, beta, and Estimator.
# We use a names pattern to split the column names into Estimator and Statistic.
df_long <- df_summarized %>%
pivot_longer(
cols = c(Naive_mean, Naive_lower, Naive_upper,
Tapered_mean, Tapered_lower, Tapered_upper,
SeparableTapered_mean, SeparableTapered_lower, SeparableTapered_upper),
names_to = c("Estimator", ".value"),
names_pattern = "(.*)_(.*)"
)
# Now df_long has columns: GridSize, beta, Estimator, mean, lower, upper.
# Define colors for the estimators
estimator_colors <- c("Naive" = "black", "Tapered" = "blue", "SeparableTapered" = "red")
# Set up a 1-row by 2-column layout for the two β values.
par(mfrow = c(1, 2), oma = c(4, 0, 2, 0), mar = c(5, 5, 4, 2))
# Define translucent fill colors for CIs
ci_fill <- c("Naive" = adjustcolor("black", alpha.f = 0.15),
"Tapered" = adjustcolor("blue", alpha.f = 0.15),
"SeparableTapered" = adjustcolor("red", alpha.f = 0.15))
# Get unique beta values (expected: 0 and 1)
beta_values <- sort(unique(df_long$beta))
# Loop over each beta value to create a panel
for (b in beta_values) {
df_sub <- subset(df_long, beta == b)
# Set x and y axis limits
x_range <- range(df_sub$GridSize, na.rm = TRUE)
y_range <- range(df_sub$lower, df_sub$upper, na.rm = TRUE)
# Empty plot
plot(x_range, y_range, type = "n",
main = paste("β =", b),
xlab = "GridSize", ylab = "Mean Spectral Norm Diff",
xaxt = "n")
axis(1, at = unique(df_sub$GridSize))
for (est in names(estimator_colors)) {
df_est <- subset(df_sub, Estimator == est)
if (nrow(df_est) > 0) {
ord <- order(df_est$GridSize)
x_vals <- df_est$GridSize[ord]
y_mean <- df_est$mean[ord]
y_lower <- df_est$lower[ord]
y_upper <- df_est$upper[ord]
# Draw shaded CI ribbon using polygon
polygon(c(x_vals, rev(x_vals)),
c(y_lower, rev(y_upper)),
col = ci_fill[est], border = NA)
# Draw mean line
lines(x_vals, y_mean, col = estimator_colors[est], lwd = 2)
points(x_vals, y_mean, col = estimator_colors[est], pch = 16)
# (Optional annotation removed)
}
}
}
# Add legend manually at specific coordinates
par(xpd = NA)
# Use a smaller top boundary for the legend region (e.g., 0.1 becomes 0.08)
par(fig = c(0, 1, 0, 0.08), new = TRUE, mar = c(0, 0, 0, 0))
plot.new()
usr <- par("usr")
# Lower the legend by subtracting a small offset (e.g., 0.05 times the vertical extent)
legend(x = (usr[1] + usr[2]) / 2,
y = usr[3] + 0.5 * (usr[4] - usr[3]) - 0.05 * (usr[4] - usr[3]),
legend = names(estimator_colors),
col = estimator_colors, lwd = 2, pch = 16, horiz = TRUE,
bty = "n", cex = 1.2, xjust = 0.5)
par(xpd = FALSE)
# Read data
resdir <- file.path(wd, "results")
df <- read.csv(file.path(resdir, "res_grid_search_all_01-04-2025.csv"), sep = ";")
# Set filtering parameters:
alpha_filter   <- 1
type_filter    <- "rectangular"
lambda_sep     <- 2    # for beta = 0 (separable)
lambda_nonsep  <- 6   # for beta = 1 (nonseparable)
# Choose one bandwidth value for each case:
l_filter_beta0 <- 7   # chosen bandwidth for separable case (β = 0)
l_filter_beta1 <- 5   # chosen bandwidth for nonseparable case (β = 1)
# Filter data: we select rows corresponding to the chosen l values
df_filtered <- df %>%
filter(
alpha    == alpha_filter,
type     == type_filter,
GridSize != 10,
(
(beta == 0 & lambda == lambda_sep & l == l_filter_beta0) |
(beta == 1 & lambda == lambda_nonsep & l == l_filter_beta1)
)
)
# Summarize: group by GridSize and beta, then compute means and SDs
df_summarized <- df_filtered %>%
group_by(GridSize, beta) %>%
summarise(
Naive_mean = mean(SNorm, na.rm = TRUE),
Naive_sd   = sd(SNorm, na.rm = TRUE),
Tapered_mean = mean(SNormTapered, na.rm = TRUE),
Tapered_sd   = sd(SNormTapered, na.rm = TRUE),
SeparableTapered_mean = mean(SNormSeparTapered, na.rm = TRUE),
SeparableTapered_sd   = sd(SNormSeparTapered, na.rm = TRUE),
n = n(),
.groups = "drop"
) %>%
# Compute standard errors and 95% confidence intervals using t quantiles:
mutate(
Naive_se = Naive_sd / sqrt(n),
Tapered_se = Tapered_sd / sqrt(n),
SeparableTapered_se = SeparableTapered_sd / sqrt(n),
Naive_lower = Naive_mean - qt(0.975, df = n - 1) * Naive_se,
Naive_upper = Naive_mean + qt(0.975, df = n - 1) * Naive_se,
Tapered_lower = Tapered_mean - qt(0.975, df = n - 1) * Tapered_se,
Tapered_upper = Tapered_mean + qt(0.975, df = n - 1) * Tapered_se,
SeparableTapered_lower = SeparableTapered_mean - qt(0.975, df = n - 1) * SeparableTapered_se,
SeparableTapered_upper = SeparableTapered_mean + qt(0.975, df = n - 1) * SeparableTapered_se
)
# Reshape the data: pivot_longer so that we have one row per GridSize, beta, and Estimator.
# We use a names pattern to split the column names into Estimator and Statistic.
df_long <- df_summarized %>%
pivot_longer(
cols = c(Naive_mean, Naive_lower, Naive_upper,
Tapered_mean, Tapered_lower, Tapered_upper,
SeparableTapered_mean, SeparableTapered_lower, SeparableTapered_upper),
names_to = c("Estimator", ".value"),
names_pattern = "(.*)_(.*)"
)
# Now df_long has columns: GridSize, beta, Estimator, mean, lower, upper.
# Define colors for the estimators
estimator_colors <- c("Naive" = "black", "Tapered" = "blue", "SeparableTapered" = "red")
# Set up a 1-row by 2-column layout for the two β values.
par(mfrow = c(1, 2), oma = c(4, 0, 2, 0), mar = c(5, 5, 4, 2))
# Define translucent fill colors for CIs
ci_fill <- c("Naive" = adjustcolor("black", alpha.f = 0.15),
"Tapered" = adjustcolor("blue", alpha.f = 0.15),
"SeparableTapered" = adjustcolor("red", alpha.f = 0.15))
# Get unique beta values (expected: 0 and 1)
beta_values <- sort(unique(df_long$beta))
# Loop over each beta value to create a panel
for (b in beta_values) {
df_sub <- subset(df_long, beta == b)
# Set x and y axis limits
x_range <- range(df_sub$GridSize, na.rm = TRUE)
y_range <- range(df_sub$lower, df_sub$upper, na.rm = TRUE)
# Empty plot
plot(x_range, y_range, type = "n",
main = paste("β =", b),
xlab = "GridSize", ylab = "Mean Spectral Norm Diff",
xaxt = "n")
axis(1, at = unique(df_sub$GridSize))
for (est in names(estimator_colors)) {
df_est <- subset(df_sub, Estimator == est)
if (nrow(df_est) > 0) {
ord <- order(df_est$GridSize)
x_vals <- df_est$GridSize[ord]
y_mean <- df_est$mean[ord]
y_lower <- df_est$lower[ord]
y_upper <- df_est$upper[ord]
# Draw shaded CI ribbon using polygon
polygon(c(x_vals, rev(x_vals)),
c(y_lower, rev(y_upper)),
col = ci_fill[est], border = NA)
# Draw mean line
lines(x_vals, y_mean, col = estimator_colors[est], lwd = 2)
points(x_vals, y_mean, col = estimator_colors[est], pch = 16)
# (Optional annotation removed)
}
}
}
# Add legend manually at specific coordinates
par(xpd = NA)
# Use a smaller top boundary for the legend region (e.g., 0.1 becomes 0.08)
par(fig = c(0, 1, 0, 0.08), new = TRUE, mar = c(0, 0, 0, 0))
plot.new()
usr <- par("usr")
# Lower the legend by subtracting a small offset (e.g., 0.05 times the vertical extent)
legend(x = (usr[1] + usr[2]) / 2,
y = usr[3] + 0.5 * (usr[4] - usr[3]) - 0.05 * (usr[4] - usr[3]),
legend = names(estimator_colors),
col = estimator_colors, lwd = 2, pch = 16, horiz = TRUE,
bty = "n", cex = 1.2, xjust = 0.5)
par(xpd = FALSE)
# Read data
resdir <- file.path(wd, "results")
df <- read.csv(file.path(resdir, "res_grid_search_all_01-04-2025.csv"), sep = ";")
# Set filtering parameters:
alpha_filter   <- 1
type_filter    <- "trapezoid"
lambda_sep     <- 2    # for beta = 0 (separable)
lambda_nonsep  <- 6   # for beta = 1 (nonseparable)
# Choose one bandwidth value for each case:
l_filter_beta0 <- 4   # chosen bandwidth for separable case (β = 0)
l_filter_beta1 <- 4   # chosen bandwidth for nonseparable case (β = 1)
# Filter data: we select rows corresponding to the chosen l values
df_filtered <- df %>%
filter(
alpha    == alpha_filter,
type     == type_filter,
GridSize != 10,
(
(beta == 0 & lambda == lambda_sep & l == l_filter_beta0) |
(beta == 1 & lambda == lambda_nonsep & l == l_filter_beta1)
)
)
# Summarize: group by GridSize and beta, then compute means and SDs
df_summarized <- df_filtered %>%
group_by(GridSize, beta) %>%
summarise(
Naive_mean = mean(SNorm, na.rm = TRUE),
Naive_sd   = sd(SNorm, na.rm = TRUE),
Tapered_mean = mean(SNormTapered, na.rm = TRUE),
Tapered_sd   = sd(SNormTapered, na.rm = TRUE),
SeparableTapered_mean = mean(SNormSeparTapered, na.rm = TRUE),
SeparableTapered_sd   = sd(SNormSeparTapered, na.rm = TRUE),
n = n(),
.groups = "drop"
) %>%
# Compute standard errors and 95% confidence intervals using t quantiles:
mutate(
Naive_se = Naive_sd / sqrt(n),
Tapered_se = Tapered_sd / sqrt(n),
SeparableTapered_se = SeparableTapered_sd / sqrt(n),
Naive_lower = Naive_mean - qt(0.975, df = n - 1) * Naive_se,
Naive_upper = Naive_mean + qt(0.975, df = n - 1) * Naive_se,
Tapered_lower = Tapered_mean - qt(0.975, df = n - 1) * Tapered_se,
Tapered_upper = Tapered_mean + qt(0.975, df = n - 1) * Tapered_se,
SeparableTapered_lower = SeparableTapered_mean - qt(0.975, df = n - 1) * SeparableTapered_se,
SeparableTapered_upper = SeparableTapered_mean + qt(0.975, df = n - 1) * SeparableTapered_se
)
# Reshape the data: pivot_longer so that we have one row per GridSize, beta, and Estimator.
# We use a names pattern to split the column names into Estimator and Statistic.
df_long <- df_summarized %>%
pivot_longer(
cols = c(Naive_mean, Naive_lower, Naive_upper,
Tapered_mean, Tapered_lower, Tapered_upper,
SeparableTapered_mean, SeparableTapered_lower, SeparableTapered_upper),
names_to = c("Estimator", ".value"),
names_pattern = "(.*)_(.*)"
)
# Now df_long has columns: GridSize, beta, Estimator, mean, lower, upper.
# Define colors for the estimators
estimator_colors <- c("Naive" = "black", "Tapered" = "blue", "SeparableTapered" = "red")
# Set up a 1-row by 2-column layout for the two β values.
par(mfrow = c(1, 2), oma = c(4, 0, 2, 0), mar = c(5, 5, 4, 2))
# Define translucent fill colors for CIs
ci_fill <- c("Naive" = adjustcolor("black", alpha.f = 0.15),
"Tapered" = adjustcolor("blue", alpha.f = 0.15),
"SeparableTapered" = adjustcolor("red", alpha.f = 0.15))
# Get unique beta values (expected: 0 and 1)
beta_values <- sort(unique(df_long$beta))
# Loop over each beta value to create a panel
for (b in beta_values) {
df_sub <- subset(df_long, beta == b)
# Set x and y axis limits
x_range <- range(df_sub$GridSize, na.rm = TRUE)
y_range <- range(df_sub$lower, df_sub$upper, na.rm = TRUE)
# Empty plot
plot(x_range, y_range, type = "n",
main = paste("β =", b),
xlab = "GridSize", ylab = "Mean Spectral Norm Diff",
xaxt = "n")
axis(1, at = unique(df_sub$GridSize))
for (est in names(estimator_colors)) {
df_est <- subset(df_sub, Estimator == est)
if (nrow(df_est) > 0) {
ord <- order(df_est$GridSize)
x_vals <- df_est$GridSize[ord]
y_mean <- df_est$mean[ord]
y_lower <- df_est$lower[ord]
y_upper <- df_est$upper[ord]
# Draw shaded CI ribbon using polygon
polygon(c(x_vals, rev(x_vals)),
c(y_lower, rev(y_upper)),
col = ci_fill[est], border = NA)
# Draw mean line
lines(x_vals, y_mean, col = estimator_colors[est], lwd = 2)
points(x_vals, y_mean, col = estimator_colors[est], pch = 16)
# (Optional annotation removed)
}
}
}
# Add legend manually at specific coordinates
par(xpd = NA)
# Use a smaller top boundary for the legend region (e.g., 0.1 becomes 0.08)
par(fig = c(0, 1, 0, 0.08), new = TRUE, mar = c(0, 0, 0, 0))
plot.new()
usr <- par("usr")
# Lower the legend by subtracting a small offset (e.g., 0.05 times the vertical extent)
legend(x = (usr[1] + usr[2]) / 2,
y = usr[3] + 0.5 * (usr[4] - usr[3]) - 0.05 * (usr[4] - usr[3]),
legend = names(estimator_colors),
col = estimator_colors, lwd = 2, pch = 16, horiz = TRUE,
bty = "n", cex = 1.2, xjust = 0.5)
par(xpd = FALSE)
